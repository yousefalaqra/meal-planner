/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Meal, Meal$ } from "./meal";
import { z } from "zod";

export type DailyMealPlan = {
    /**
     * The day of the week
     */
    dayOfWeek?: string | undefined;
    meals?: Array<Meal> | undefined;
};

/** @internal */
export namespace DailyMealPlan$ {
    export type Inbound = {
        dayOfWeek?: string | undefined;
        meals?: Array<Meal$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<DailyMealPlan, z.ZodTypeDef, Inbound> = z
        .object({
            dayOfWeek: z.string().optional(),
            meals: z.array(Meal$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.dayOfWeek === undefined ? null : { dayOfWeek: v.dayOfWeek }),
                ...(v.meals === undefined ? null : { meals: v.meals }),
            };
        });

    export type Outbound = {
        dayOfWeek?: string | undefined;
        meals?: Array<Meal$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DailyMealPlan> = z
        .object({
            dayOfWeek: z.string().optional(),
            meals: z.array(Meal$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.dayOfWeek === undefined ? null : { dayOfWeek: v.dayOfWeek }),
                ...(v.meals === undefined ? null : { meals: v.meals }),
            };
        });
}
